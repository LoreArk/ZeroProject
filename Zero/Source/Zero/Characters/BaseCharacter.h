// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Character.h"
#include "Interface_Damagable.h"
#include "Interface_Perception.h"
#include "MotionWarpingComponent.h"
#include "Interface_BaseCharacter.h"
#include "BaseCharacter.generated.h"

UENUM(BlueprintType)
enum class EGait : uint8
{
	None    UMETA(DisplayName = "None"),
	Walk    UMETA(DisplayName = "Walk"),
	Jog     UMETA(DisplayName = "Jog"),
	Sprint  UMETA(DisplayName = "Sprint"),
	Crouch  UMETA(DisplayName = "Crouch"),
    Aim     UMETA(DisplayName = "Aim")
};

USTRUCT(BlueprintType)
struct FGaitSettings
{
    GENERATED_BODY()

    // The maximum walking speed for this gait
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement")
    FVector MaxWalkSpeed;

    // The maximum acceleration for this gait
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement")
    float MaxAcceleration;

    // The deceleration applied when braking
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement")
    float BrakingDeceleration;

    // Factor applied to the braking friction
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement")
    float BrakingFrictionFactor;

    // Whether to use a separate braking friction value
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement")
    bool bUseSeparateBrakingFriction;

    // The separate braking friction to use (if enabled)
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement")
    float BrakingFriction;

    // The strength of the footstep noise generated by this gait
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Sound")
    float FootstepNoiseStrength;

    // Constructor to initialize default values
    FGaitSettings()
        : MaxWalkSpeed(FVector::ZeroVector)
        , MaxAcceleration(2048.f)
        , BrakingDeceleration(2048.f)
        , BrakingFrictionFactor(1.f)
        , bUseSeparateBrakingFriction(false)
        , BrakingFriction(0.f)
        , FootstepNoiseStrength(1.f)
    {}
};

UCLASS()
class ZERO_API ABaseCharacter : public ACharacter, public IInterface_Damagable, public IInterface_Perception, public IInterface_BaseCharacter
{
	GENERATED_BODY()

public:
	// Sets default values for this character's properties
	ABaseCharacter();

    UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
    EGait MovementState;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Debug")
    bool bShowDebugs;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float FirstPersonPitch;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    UComponent_Damagable* DamagableComponent;

    UPROPERTY(Instanced, EditDefaultsOnly, BlueprintReadOnly)
    UComponent_Perceivable* PerceivableComponent;

    UPROPERTY(VisibleAnywhere)
    UAnimMontage* CurrentHitReaction;

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

    UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Components", meta = (AllowPrivateAccess = "true"))
    TMap<EGait, FGaitSettings> GaitSettings;

	UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Components", meta = (AllowPrivateAccess = "true"))
	class UMotionWarpingComponent* MotionWarpingComponent;

	UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Movement", meta = (AllowPrivateAccess = "true"))
	FVector WalkSpeed;

	UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Movement", meta = (AllowPrivateAccess = "true"))
	FVector JogSpeed;

	UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Movement", meta = (AllowPrivateAccess = "true"))
	FVector SprintSpeed;

	UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Movement", meta = (AllowPrivateAccess = "true"))
	FVector CrouchSpeed;

	UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Movement", meta = (AllowPrivateAccess = "true"))
	FVector AimSpeed;

public:	

	virtual void Tick(float DeltaTime) override;

	virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

    //Damagable interface
    virtual bool TakeDamage_Implementation(FDamageSettings DamageSettings, FHitResult HitResult, AActor* DamageDealer);
    virtual void PlayHitReaction_Implementation(UAnimMontage* Montage);
    virtual UComponent_Damagable* GetDamagableComponent_Implementation();

    //Perception interface
    virtual UComponent_Perceivable* GetPerceivableComponent_Implementation() override;
    virtual FVector GetSightTarget_Implementation() override;

    //Base Character Interface
    virtual bool GetIsCrouching_Implementation() override;

    UFUNCTION()
    void EndHitReaction(UAnimMontage* Montage, bool bInterrupted);
    

    UFUNCTION()
    virtual void OnDeathEvent(AActor* DeadActor);


private:

    void DebugControlRotationArrow();
};
